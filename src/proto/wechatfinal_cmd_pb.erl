%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.2.1
-module(wechatfinal_cmd_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_cmd/1, enum_value_by_symbol_cmd/1]).
-export([enum_symbol_by_value_pattern/1, enum_value_by_symbol_pattern/1]).
-export([enum_symbol_by_value_room_type/1, enum_value_by_symbol_room_type/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("wechatfinal_cmd_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'cmd'() :: 'chat' | 'online' | 'room' | 'system' | 'history'.
-type 'pattern'() :: 'private' | 'public'.
-type 'room_type'() :: 'create' | 'add' | 'remove' | 'drop' | 'flush' | 'history'.
-export_type(['cmd'/0, 'pattern'/0, 'room_type'/0]).

%% message types
-type chat() :: #chat{}.
-type online() :: #online{}.
-type room() :: #room{}.
-type system() :: #system{}.
-type history() :: #history{}.
-type data() :: #data{}.
-type msg() :: #msg{}.
-export_type(['chat'/0, 'online'/0, 'room'/0, 'system'/0, 'history'/0, 'data'/0, 'msg'/0]).

-spec encode_msg(#chat{} | #online{} | #room{} | #system{} | #history{} | #data{} | #msg{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#chat{} | #online{} | #room{} | #system{} | #history{} | #data{} | #msg{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    verify_msg(Msg, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #chat{} -> e_msg_chat(Msg, TrUserData);
      #online{} -> e_msg_online(Msg, TrUserData);
      #room{} -> e_msg_room(Msg, TrUserData);
      #system{} -> e_msg_system(Msg, TrUserData);
      #history{} -> e_msg_history(Msg, TrUserData);
      #data{} -> e_msg_data(Msg, TrUserData);
      #msg{} -> e_msg_msg(Msg, TrUserData)
    end.



e_msg_chat(Msg, TrUserData) ->
    e_msg_chat(Msg, <<>>, TrUserData).


e_msg_chat(#chat{sender = F1, body = F2, receiver = F3,
		 timer = F4, display = F5, type = F6, unread = F7},
	   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_sint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_enum_pattern(TrF6, <<B5/binary, 48>>)
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     e_type_string(TrF7, <<B6/binary, 58>>)
	   end
    end.

e_msg_online(Msg, TrUserData) ->
    e_msg_online(Msg, <<>>, TrUserData).


e_msg_online(#online{type = F1, body = F2, online = F3,
		     offline = F4},
	     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_pattern(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_online_online(TrF3, B2, TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true -> e_field_online_offline(TrF4, B3, TrUserData)
      end
    end.

e_msg_room(Msg, TrUserData) ->
    e_msg_room(Msg, <<>>, TrUserData).


e_msg_room(#room{type = F1, rname = F2, body = F3,
		 history = F4},
	   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_room_type(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true -> e_field_room_history(TrF4, B3, TrUserData)
      end
    end.

e_msg_system(Msg, TrUserData) ->
    e_msg_system(Msg, <<>>, TrUserData).


e_msg_system(#system{type = F1, receiver = F2,
		     body = F3},
	     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_pattern(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>)
    end.

e_msg_history(Msg, TrUserData) ->
    e_msg_history(Msg, <<>>, TrUserData).


e_msg_history(#history{sender = F1, receiver = F2,
		       history = F3, pageSize = F4, pageNum = F5},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_history_history(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_sint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_type_sint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_data(Msg, TrUserData) ->
    e_msg_data(Msg, <<>>, TrUserData).


e_msg_data(#data{chat = F1, online = F2, room = F3,
		 system = F4, history = F5},
	   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_data_chat(TrF1, <<Bin/binary, 10>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_data_online(TrF2, <<B1/binary, 18>>,
				       TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_data_room(TrF3, <<B2/binary, 26>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_data_system(TrF4, <<B3/binary, 34>>,
				       TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_mfield_data_history(TrF5, <<B4/binary, 42>>,
				   TrUserData)
	   end
    end.

e_msg_msg(Msg, TrUserData) ->
    e_msg_msg(Msg, <<>>, TrUserData).


e_msg_msg(#msg{type = F1, data = F2}, Bin,
	  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_cmd(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_msg_data(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

e_field_online_online([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_online_online(Rest, Bin3, TrUserData);
e_field_online_online([], Bin, _TrUserData) -> Bin.

e_field_online_offline([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_online_offline(Rest, Bin3, TrUserData);
e_field_online_offline([], Bin, _TrUserData) -> Bin.

e_mfield_room_history(Msg, Bin, TrUserData) ->
    SubBin = e_msg_chat(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_room_history([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_room_history(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_room_history(Rest, Bin3, TrUserData);
e_field_room_history([], Bin, _TrUserData) -> Bin.

e_mfield_history_history(Msg, Bin, TrUserData) ->
    SubBin = e_msg_chat(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_history_history([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_history_history(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_history_history(Rest, Bin3, TrUserData);
e_field_history_history([], Bin, _TrUserData) -> Bin.

e_mfield_data_chat(Msg, Bin, TrUserData) ->
    SubBin = e_msg_chat(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_data_online(Msg, Bin, TrUserData) ->
    SubBin = e_msg_online(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_data_room(Msg, Bin, TrUserData) ->
    SubBin = e_msg_room(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_data_system(Msg, Bin, TrUserData) ->
    SubBin = e_msg_system(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_data_history(Msg, Bin, TrUserData) ->
    SubBin = e_msg_history(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_msg_data(Msg, Bin, TrUserData) ->
    SubBin = e_msg_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_cmd(chat, Bin) -> <<Bin/binary, 1>>;
e_enum_cmd(online, Bin) -> <<Bin/binary, 2>>;
e_enum_cmd(room, Bin) -> <<Bin/binary, 3>>;
e_enum_cmd(system, Bin) -> <<Bin/binary, 4>>;
e_enum_cmd(history, Bin) -> <<Bin/binary, 5>>;
e_enum_cmd(V, Bin) -> e_varint(V, Bin).

e_enum_pattern(private, Bin) -> <<Bin/binary, 1>>;
e_enum_pattern(public, Bin) -> <<Bin/binary, 2>>;
e_enum_pattern(V, Bin) -> e_varint(V, Bin).

e_enum_room_type(create, Bin) -> <<Bin/binary, 1>>;
e_enum_room_type(add, Bin) -> <<Bin/binary, 2>>;
e_enum_room_type(remove, Bin) -> <<Bin/binary, 3>>;
e_enum_room_type(drop, Bin) -> <<Bin/binary, 4>>;
e_enum_room_type(flush, Bin) -> <<Bin/binary, 5>>;
e_enum_room_type(history, Bin) -> <<Bin/binary, 6>>;
e_enum_room_type(V, Bin) -> e_varint(V, Bin).

e_type_sint(Value, Bin) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin) ->
    e_varint(Value * -2 - 1, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_PATTERN_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit(chat, Bin, TrUserData) ->
    d_msg_chat(Bin, TrUserData);
decode_msg_2_doit(online, Bin, TrUserData) ->
    d_msg_online(Bin, TrUserData);
decode_msg_2_doit(room, Bin, TrUserData) ->
    d_msg_room(Bin, TrUserData);
decode_msg_2_doit(system, Bin, TrUserData) ->
    d_msg_system(Bin, TrUserData);
decode_msg_2_doit(history, Bin, TrUserData) ->
    d_msg_history(Bin, TrUserData);
decode_msg_2_doit(data, Bin, TrUserData) ->
    d_msg_data(Bin, TrUserData);
decode_msg_2_doit(msg, Bin, TrUserData) ->
    d_msg_msg(Bin, TrUserData).



d_msg_chat(Bin, TrUserData) ->
    dfp_read_field_def_chat(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_chat(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_chat_sender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_chat(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_chat_body(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_chat(<<26, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_chat_receiver(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_chat(<<32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_chat_timer(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_chat(<<42, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_chat_display(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_chat(<<48, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_chat_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_chat(<<58, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_chat_unread(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_chat(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, _) ->
    #chat{sender = F@_1, body = F@_2, receiver = F@_3,
	  timer = F@_4, display = F@_5, type = F@_6,
	  unread = F@_7};
dfp_read_field_def_chat(Other, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_chat(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_chat(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_chat(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_chat(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_chat_sender(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_chat_body(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_chat_receiver(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_chat_timer(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_chat_display(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      48 ->
	  d_field_chat_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_chat_unread(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_chat(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_chat(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_chat(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, TrUserData);
	    3 ->
		skip_group_chat(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_chat(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_chat(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, _) ->
    #chat{sender = F@_1, body = F@_2, receiver = F@_3,
	  timer = F@_4, display = F@_5, type = F@_6,
	  unread = F@_7}.

d_field_chat_sender(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_chat_sender(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_chat_sender(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_chat(RestF, 0, 0, NewFValue, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_chat_body(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_chat_body(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_chat_body(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_chat(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_chat_receiver(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_chat_receiver(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_chat_receiver(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_chat(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_chat_timer(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_chat_timer(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_chat_timer(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 -> ZValue bsr 1;
			       true -> -(ZValue + 1 bsr 1)
			    end
			  end,
			  Rest},
    dfp_read_field_def_chat(RestF, 0, 0, F@_1, F@_2, F@_3,
			    NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_chat_display(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_chat_display(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_chat_display(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_chat(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_chat_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_chat_type(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_chat_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {d_enum_pattern(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   Res
					 end),
			  Rest},
    dfp_read_field_def_chat(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_chat_unread(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_chat_unread(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_chat_unread(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_chat(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_chat(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     F@_5, F@_6, F@_7, TrUserData);
skip_varint_chat(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_chat(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    skip_length_delimited_chat(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
skip_length_delimited_chat(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_chat(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_chat(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_chat(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_chat(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_chat(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

d_msg_online(Bin, TrUserData) ->
    dfp_read_field_def_online(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), id([], TrUserData),
			      id([], TrUserData), TrUserData).

dfp_read_field_def_online(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_online_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_online(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_online_body(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_online(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_online_online(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_online(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_online_offline(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_online(<<>>, 0, 0, F@_1, F@_2, R1,
			  R2, TrUserData) ->
    #online{type = F@_1, body = F@_2,
	    online = lists_reverse(R1, TrUserData),
	    offline = lists_reverse(R2, TrUserData)};
dfp_read_field_def_online(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_online(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_online(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_online(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_online(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_online_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      18 ->
	  d_field_online_body(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      26 ->
	  d_field_online_online(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      34 ->
	  d_field_online_offline(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_online(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_online(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_online(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_online(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_online(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_online(<<>>, 0, 0, F@_1, F@_2, R1, R2,
			 TrUserData) ->
    #online{type = F@_1, body = F@_2,
	    online = lists_reverse(R1, TrUserData),
	    offline = lists_reverse(R2, TrUserData)}.

d_field_online_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_online_type(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_online_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {d_enum_pattern(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   Res
					 end),
			  Rest},
    dfp_read_field_def_online(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_online_body(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_online_body(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_online_body(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_online(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_online_online(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_online_online(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_online_online(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_online(RestF, 0, 0, F@_1, F@_2,
			      cons(NewFValue, Prev, TrUserData), F@_4,
			      TrUserData).

d_field_online_offline(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_online_offline(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_online_offline(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_online(RestF, 0, 0, F@_1, F@_2, F@_3,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_online(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_online(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_online(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_online(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_online(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_online(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_online(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_online(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_online(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_online(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_online(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_online(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_online(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_online(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

d_msg_room(Bin, TrUserData) ->
    dfp_read_field_def_room(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), id([], TrUserData),
			    TrUserData).

dfp_read_field_def_room(<<8, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_room_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      TrUserData);
dfp_read_field_def_room(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_room_rname(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
dfp_read_field_def_room(<<26, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_room_body(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      TrUserData);
dfp_read_field_def_room(<<34, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_room_history(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_room(<<>>, 0, 0, F@_1, F@_2, F@_3,
			R1, TrUserData) ->
    #room{type = F@_1, rname = F@_2, body = F@_3,
	  history = lists_reverse(R1, TrUserData)};
dfp_read_field_def_room(Other, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData) ->
    dg_read_field_def_room(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData).

dg_read_field_def_room(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_room(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_room(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_room_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    TrUserData);
      18 ->
	  d_field_room_rname(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData);
      26 ->
	  d_field_room_body(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    TrUserData);
      34 ->
	  d_field_room_history(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_room(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    1 ->
		skip_64_room(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData);
	    2 ->
		skip_length_delimited_room(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    3 ->
		skip_group_room(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
	    5 ->
		skip_32_room(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData)
	  end
    end;
dg_read_field_def_room(<<>>, 0, 0, F@_1, F@_2, F@_3, R1,
		       TrUserData) ->
    #room{type = F@_1, rname = F@_2, body = F@_3,
	  history = lists_reverse(R1, TrUserData)}.

d_field_room_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_room_type(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, TrUserData);
d_field_room_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {d_enum_room_type(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     Res
					   end),
			  Rest},
    dfp_read_field_def_room(RestF, 0, 0, NewFValue, F@_2,
			    F@_3, F@_4, TrUserData).

d_field_room_rname(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_room_rname(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, TrUserData);
d_field_room_rname(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_room(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, F@_4, TrUserData).

d_field_room_body(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_room_body(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, TrUserData);
d_field_room_body(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_room(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, F@_4, TrUserData).

d_field_room_history(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_room_history(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_room_history(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_chat(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_room(RestF, 0, 0, F@_1, F@_2, F@_3,
			    cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_room(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_room(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     TrUserData);
skip_varint_room(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_room(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_length_delimited_room(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_room(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_room(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_room(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_group_room(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_room(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_32_room(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_room(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_64_room(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_room(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

d_msg_system(Bin, TrUserData) ->
    dfp_read_field_def_system(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_system(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_system_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_system(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_system_receiver(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_system(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_system_body(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_system(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #system{type = F@_1, receiver = F@_2, body = F@_3};
dfp_read_field_def_system(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    dg_read_field_def_system(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData).

dg_read_field_def_system(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_system(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_system(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_system_type(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      18 ->
	  d_field_system_receiver(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      26 ->
	  d_field_system_body(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_system(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    1 ->
		skip_64_system(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    2 ->
		skip_length_delimited_system(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    3 ->
		skip_group_system(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    5 ->
		skip_32_system(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_system(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 _) ->
    #system{type = F@_1, receiver = F@_2, body = F@_3}.

d_field_system_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_system_type(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_system_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {d_enum_pattern(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   Res
					 end),
			  Rest},
    dfp_read_field_def_system(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, TrUserData).

d_field_system_receiver(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_system_receiver(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_system_receiver(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_system(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, TrUserData).

d_field_system_body(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_system_body(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_system_body(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_system(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, TrUserData).

skip_varint_system(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_system(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
skip_varint_system(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_system(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_length_delimited_system(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_system(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_system(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_system(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData).

skip_group_system(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_system(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      TrUserData).

skip_32_system(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_system(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_64_system(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_system(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

d_msg_history(Bin, TrUserData) ->
    dfp_read_field_def_history(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), id([], TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_history(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_history_sender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_history(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_history_receiver(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_history(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_history_history(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_history(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_history_pageSize(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_history(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_history_pageNum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_history(<<>>, 0, 0, F@_1, F@_2, R1,
			   F@_4, F@_5, TrUserData) ->
    #history{sender = F@_1, receiver = F@_2,
	     history = lists_reverse(R1, TrUserData),
	     pageSize = F@_4, pageNum = F@_5};
dfp_read_field_def_history(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_history(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_history(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_history(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_history(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_history_sender(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      18 ->
	  d_field_history_receiver(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      26 ->
	  d_field_history_history(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      32 ->
	  d_field_history_pageSize(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      40 ->
	  d_field_history_pageNum(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_history(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_history(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_history(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_history(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_history(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_history(<<>>, 0, 0, F@_1, F@_2, R1,
			  F@_4, F@_5, TrUserData) ->
    #history{sender = F@_1, receiver = F@_2,
	     history = lists_reverse(R1, TrUserData),
	     pageSize = F@_4, pageNum = F@_5}.

d_field_history_sender(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_history_sender(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_history_sender(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_history(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_history_receiver(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_history_receiver(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_history_receiver(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_history(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_history_history(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_history_history(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_history_history(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_chat(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_history(RestF, 0, 0, F@_1, F@_2,
			       cons(NewFValue, Prev, TrUserData), F@_4, F@_5,
			       TrUserData).

d_field_history_pageSize(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_history_pageSize(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_history_pageSize(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 -> ZValue bsr 1;
			       true -> -(ZValue + 1 bsr 1)
			    end
			  end,
			  Rest},
    dfp_read_field_def_history(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, TrUserData).

d_field_history_pageNum(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_history_pageNum(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_history_pageNum(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 -> ZValue bsr 1;
			       true -> -(ZValue + 1 bsr 1)
			    end
			  end,
			  Rest},
    dfp_read_field_def_history(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_history(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_history(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_history(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_history(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_history(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_history(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_history(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_history(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_history(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_history(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_history(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_history(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_history(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_history(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_msg_data(Bin, TrUserData) ->
    dfp_read_field_def_data(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_data(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_data_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, TrUserData);
dfp_read_field_def_data(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_data_online(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_data(<<26, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_data_room(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, TrUserData);
dfp_read_field_def_data(<<34, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_data_system(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_data(<<42, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_data_history(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_data(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, _) ->
    #data{chat = F@_1, online = F@_2, room = F@_3,
	  system = F@_4, history = F@_5};
dfp_read_field_def_data(Other, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData) ->
    dg_read_field_def_data(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData).

dg_read_field_def_data(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_data(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_data(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_data_chat(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, TrUserData);
      18 ->
	  d_field_data_online(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      26 ->
	  d_field_data_room(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, TrUserData);
      34 ->
	  d_field_data_system(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      42 ->
	  d_field_data_history(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    1 ->
		skip_64_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData);
	    2 ->
		skip_length_delimited_data(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_data(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData)
	  end
    end;
dg_read_field_def_data(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       F@_4, F@_5, _) ->
    #data{chat = F@_1, online = F@_2, room = F@_3,
	  system = F@_4, history = F@_5}.

d_field_data_chat(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_data_chat(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_data_chat(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_chat(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_data(RestF, 0, 0,
			    if Prev == undefined -> NewFValue;
			       true ->
				   merge_msg_chat(Prev, NewFValue, TrUserData)
			    end,
			    F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_data_online(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_data_online(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_data_online(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_online(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_data(RestF, 0, 0, F@_1,
			    if Prev == undefined -> NewFValue;
			       true ->
				   merge_msg_online(Prev, NewFValue, TrUserData)
			    end,
			    F@_3, F@_4, F@_5, TrUserData).

d_field_data_room(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_data_room(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_data_room(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_room(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_data(RestF, 0, 0, F@_1, F@_2,
			    if Prev == undefined -> NewFValue;
			       true ->
				   merge_msg_room(Prev, NewFValue, TrUserData)
			    end,
			    F@_4, F@_5, TrUserData).

d_field_data_system(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_data_system(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_data_system(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_system(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_data(RestF, 0, 0, F@_1, F@_2, F@_3,
			    if Prev == undefined -> NewFValue;
			       true ->
				   merge_msg_system(Prev, NewFValue, TrUserData)
			    end,
			    F@_5, TrUserData).

d_field_data_history(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_data_history(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_data_history(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_history(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_data(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4,
			    if Prev == undefined -> NewFValue;
			       true ->
				   merge_msg_history(Prev, NewFValue,
						     TrUserData)
			    end,
			    TrUserData).

skip_varint_data(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_data(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     F@_5, TrUserData);
skip_varint_data(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

skip_length_delimited_data(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_data(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_data(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_data(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

skip_group_data(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_data(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

skip_32_data(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

skip_64_data(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

d_msg_msg(Bin, TrUserData) ->
    dfp_read_field_def_msg(Bin, 0, 0,
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   TrUserData).

dfp_read_field_def_msg(<<8, Rest/binary>>, Z1, Z2, F@_1,
		       F@_2, TrUserData) ->
    d_field_msg_type(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_msg(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_msg_data(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_msg(<<>>, 0, 0, F@_1, F@_2, _) ->
    #msg{type = F@_1, data = F@_2};
dfp_read_field_def_msg(Other, Z1, Z2, F@_1, F@_2,
		       TrUserData) ->
    dg_read_field_def_msg(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData).

dg_read_field_def_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
dg_read_field_def_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_msg_type(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_msg_data(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_msg(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    3 ->
		skip_group_msg(Rest, Key bsr 3, 0, F@_1, F@_2,
			       TrUserData);
	    5 -> skip_32_msg(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_msg(<<>>, 0, 0, F@_1, F@_2, _) ->
    #msg{type = F@_1, data = F@_2}.

d_field_msg_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_msg_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     TrUserData);
d_field_msg_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F@_2, TrUserData) ->
    {NewFValue, RestF} = {d_enum_cmd(begin
				       <<Res:32/signed-native>> = <<(X bsl N +
								       Acc):32/unsigned-native>>,
				       Res
				     end),
			  Rest},
    dfp_read_field_def_msg(RestF, 0, 0, NewFValue, F@_2,
			   TrUserData).

d_field_msg_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_msg_data(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     TrUserData);
d_field_msg_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_data(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_msg(RestF, 0, 0, F@_1,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_data(Prev, NewFValue, TrUserData)
			   end,
			   TrUserData).

skip_varint_msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    skip_varint_msg(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_length_delimited_msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
skip_length_delimited_msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg(Rest2, 0, 0, F@_1, F@_2,
			   TrUserData).

skip_group_msg(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg(Rest, 0, Z2, F@_1, F@_2,
			   TrUserData).

skip_32_msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_64_msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

d_enum_cmd(1) -> chat;
d_enum_cmd(2) -> online;
d_enum_cmd(3) -> room;
d_enum_cmd(4) -> system;
d_enum_cmd(5) -> history;
d_enum_cmd(V) -> V.

d_enum_pattern(1) -> private;
d_enum_pattern(2) -> public;
d_enum_pattern(V) -> V.

d_enum_room_type(1) -> create;
d_enum_room_type(2) -> add;
d_enum_room_type(3) -> remove;
d_enum_room_type(4) -> drop;
d_enum_room_type(5) -> flush;
d_enum_room_type(6) -> history;
d_enum_room_type(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #chat{} -> merge_msg_chat(Prev, New, TrUserData);
      #online{} -> merge_msg_online(Prev, New, TrUserData);
      #room{} -> merge_msg_room(Prev, New, TrUserData);
      #system{} -> merge_msg_system(Prev, New, TrUserData);
      #history{} -> merge_msg_history(Prev, New, TrUserData);
      #data{} -> merge_msg_data(Prev, New, TrUserData);
      #msg{} -> merge_msg_msg(Prev, New, TrUserData)
    end.

merge_msg_chat(#chat{timer = PFtimer, type = PFtype,
		     unread = PFunread},
	       #chat{sender = NFsender, body = NFbody,
		     receiver = NFreceiver, timer = NFtimer,
		     display = NFdisplay, type = NFtype, unread = NFunread},
	       _) ->
    #chat{sender = NFsender, body = NFbody,
	  receiver = NFreceiver,
	  timer =
	      if NFtimer =:= undefined -> PFtimer;
		 true -> NFtimer
	      end,
	  display = NFdisplay,
	  type =
	      if NFtype =:= undefined -> PFtype;
		 true -> NFtype
	      end,
	  unread =
	      if NFunread =:= undefined -> PFunread;
		 true -> NFunread
	      end}.

merge_msg_online(#online{body = PFbody,
			 online = PFonline, offline = PFoffline},
		 #online{type = NFtype, body = NFbody, online = NFonline,
			 offline = NFoffline},
		 TrUserData) ->
    #online{type = NFtype,
	    body =
		if NFbody =:= undefined -> PFbody;
		   true -> NFbody
		end,
	    online =
		if PFonline /= undefined, NFonline /= undefined ->
		       'erlang_++'(PFonline, NFonline, TrUserData);
		   PFonline == undefined -> NFonline;
		   NFonline == undefined -> PFonline
		end,
	    offline =
		if PFoffline /= undefined, NFoffline /= undefined ->
		       'erlang_++'(PFoffline, NFoffline, TrUserData);
		   PFoffline == undefined -> NFoffline;
		   NFoffline == undefined -> PFoffline
		end}.

merge_msg_room(#room{rname = PFrname, body = PFbody,
		     history = PFhistory},
	       #room{type = NFtype, rname = NFrname, body = NFbody,
		     history = NFhistory},
	       TrUserData) ->
    #room{type = NFtype,
	  rname =
	      if NFrname =:= undefined -> PFrname;
		 true -> NFrname
	      end,
	  body =
	      if NFbody =:= undefined -> PFbody;
		 true -> NFbody
	      end,
	  history =
	      if PFhistory /= undefined, NFhistory /= undefined ->
		     'erlang_++'(PFhistory, NFhistory, TrUserData);
		 PFhistory == undefined -> NFhistory;
		 NFhistory == undefined -> PFhistory
	      end}.

merge_msg_system(#system{},
		 #system{type = NFtype, receiver = NFreceiver,
			 body = NFbody},
		 _) ->
    #system{type = NFtype, receiver = NFreceiver,
	    body = NFbody}.

merge_msg_history(#history{sender = PFsender,
			   receiver = PFreceiver, history = PFhistory,
			   pageSize = PFpageSize, pageNum = PFpageNum},
		  #history{sender = NFsender, receiver = NFreceiver,
			   history = NFhistory, pageSize = NFpageSize,
			   pageNum = NFpageNum},
		  TrUserData) ->
    #history{sender =
		 if NFsender =:= undefined -> PFsender;
		    true -> NFsender
		 end,
	     receiver =
		 if NFreceiver =:= undefined -> PFreceiver;
		    true -> NFreceiver
		 end,
	     history =
		 if PFhistory /= undefined, NFhistory /= undefined ->
			'erlang_++'(PFhistory, NFhistory, TrUserData);
		    PFhistory == undefined -> NFhistory;
		    NFhistory == undefined -> PFhistory
		 end,
	     pageSize =
		 if NFpageSize =:= undefined -> PFpageSize;
		    true -> NFpageSize
		 end,
	     pageNum =
		 if NFpageNum =:= undefined -> PFpageNum;
		    true -> NFpageNum
		 end}.

merge_msg_data(#data{chat = PFchat, online = PFonline,
		     room = PFroom, system = PFsystem, history = PFhistory},
	       #data{chat = NFchat, online = NFonline, room = NFroom,
		     system = NFsystem, history = NFhistory},
	       TrUserData) ->
    #data{chat =
	      if PFchat /= undefined, NFchat /= undefined ->
		     merge_msg_chat(PFchat, NFchat, TrUserData);
		 PFchat == undefined -> NFchat;
		 NFchat == undefined -> PFchat
	      end,
	  online =
	      if PFonline /= undefined, NFonline /= undefined ->
		     merge_msg_online(PFonline, NFonline, TrUserData);
		 PFonline == undefined -> NFonline;
		 NFonline == undefined -> PFonline
	      end,
	  room =
	      if PFroom /= undefined, NFroom /= undefined ->
		     merge_msg_room(PFroom, NFroom, TrUserData);
		 PFroom == undefined -> NFroom;
		 NFroom == undefined -> PFroom
	      end,
	  system =
	      if PFsystem /= undefined, NFsystem /= undefined ->
		     merge_msg_system(PFsystem, NFsystem, TrUserData);
		 PFsystem == undefined -> NFsystem;
		 NFsystem == undefined -> PFsystem
	      end,
	  history =
	      if PFhistory /= undefined, NFhistory /= undefined ->
		     merge_msg_history(PFhistory, NFhistory, TrUserData);
		 PFhistory == undefined -> NFhistory;
		 NFhistory == undefined -> PFhistory
	      end}.

merge_msg_msg(#msg{data = PFdata},
	      #msg{type = NFtype, data = NFdata}, TrUserData) ->
    #msg{type = NFtype,
	 data = merge_msg_data(PFdata, NFdata, TrUserData)}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #chat{} -> v_msg_chat(Msg, [chat], TrUserData);
      #online{} -> v_msg_online(Msg, [online], TrUserData);
      #room{} -> v_msg_room(Msg, [room], TrUserData);
      #system{} -> v_msg_system(Msg, [system], TrUserData);
      #history{} -> v_msg_history(Msg, [history], TrUserData);
      #data{} -> v_msg_data(Msg, [data], TrUserData);
      #msg{} -> v_msg_msg(Msg, [msg], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_chat/3}).
v_msg_chat(#chat{sender = F1, body = F2, receiver = F3,
		 timer = F4, display = F5, type = F6, unread = F7},
	   Path, _) ->
    v_type_string(F1, [sender | Path]),
    v_type_string(F2, [body | Path]),
    v_type_string(F3, [receiver | Path]),
    if F4 == undefined -> ok;
       true -> v_type_sint64(F4, [timer | Path])
    end,
    v_type_string(F5, [display | Path]),
    if F6 == undefined -> ok;
       true -> v_enum_pattern(F6, [type | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [unread | Path])
    end,
    ok;
v_msg_chat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, chat}, X, Path).

-dialyzer({nowarn_function,v_msg_online/3}).
v_msg_online(#online{type = F1, body = F2, online = F3,
		     offline = F4},
	     Path, _) ->
    v_enum_pattern(F1, [type | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [body | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [online | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3,
			 [online | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [offline | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [offline | Path])
    end,
    ok;
v_msg_online(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, online}, X, Path).

-dialyzer({nowarn_function,v_msg_room/3}).
v_msg_room(#room{type = F1, rname = F2, body = F3,
		 history = F4},
	   Path, TrUserData) ->
    v_enum_room_type(F1, [type | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [rname | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [body | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_chat(Elem, [history | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, chat}}, F4,
			 [history | Path])
    end,
    ok;
v_msg_room(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, room}, X, Path).

-dialyzer({nowarn_function,v_msg_system/3}).
v_msg_system(#system{type = F1, receiver = F2,
		     body = F3},
	     Path, _) ->
    v_enum_pattern(F1, [type | Path]),
    v_type_string(F2, [receiver | Path]),
    v_type_string(F3, [body | Path]),
    ok;
v_msg_system(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, system}, X, Path).

-dialyzer({nowarn_function,v_msg_history/3}).
v_msg_history(#history{sender = F1, receiver = F2,
		       history = F3, pageSize = F4, pageNum = F5},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sender | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [receiver | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_chat(Elem, [history | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, chat}}, F3,
			 [history | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_sint64(F4, [pageSize | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_sint64(F5, [pageNum | Path])
    end,
    ok;
v_msg_history(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, history}, X, Path).

-dialyzer({nowarn_function,v_msg_data/3}).
v_msg_data(#data{chat = F1, online = F2, room = F3,
		 system = F4, history = F5},
	   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_chat(F1, [chat | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_online(F2, [online | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_room(F3, [room | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_system(F4, [system | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_history(F5, [history | Path], TrUserData)
    end,
    ok;
v_msg_data(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, data}, X, Path).

-dialyzer({nowarn_function,v_msg_msg/3}).
v_msg_msg(#msg{type = F1, data = F2}, Path,
	  TrUserData) ->
    v_enum_cmd(F1, [type | Path]),
    v_msg_data(F2, [data | Path], TrUserData),
    ok.

-dialyzer({nowarn_function,v_enum_cmd/2}).
v_enum_cmd(chat, _Path) -> ok;
v_enum_cmd(online, _Path) -> ok;
v_enum_cmd(room, _Path) -> ok;
v_enum_cmd(system, _Path) -> ok;
v_enum_cmd(history, _Path) -> ok;
v_enum_cmd(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_cmd(X, Path) ->
    mk_type_error({invalid_enum, cmd}, X, Path).

-dialyzer({nowarn_function,v_enum_pattern/2}).
v_enum_pattern(private, _Path) -> ok;
v_enum_pattern(public, _Path) -> ok;
v_enum_pattern(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_pattern(X, Path) ->
    mk_type_error({invalid_enum, pattern}, X, Path).

-dialyzer({nowarn_function,v_enum_room_type/2}).
v_enum_room_type(create, _Path) -> ok;
v_enum_room_type(add, _Path) -> ok;
v_enum_room_type(remove, _Path) -> ok;
v_enum_room_type(drop, _Path) -> ok;
v_enum_room_type(flush, _Path) -> ok;
v_enum_room_type(history, _Path) -> ok;
v_enum_room_type(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_room_type(X, Path) ->
    mk_type_error({invalid_enum, room_type}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint64/2}).
v_type_sint64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_sint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint64, signed, 64},
		  N, Path);
v_type_sint64(X, Path) ->
    mk_type_error({bad_integer, sint64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, cmd},
      [{chat, 1}, {online, 2}, {room, 3}, {system, 4},
       {history, 5}]},
     {{enum, pattern}, [{private, 1}, {public, 2}]},
     {{enum, room_type},
      [{create, 1}, {add, 2}, {remove, 3}, {drop, 4},
       {flush, 5}, {history, 6}]},
     {{msg, chat},
      [#field{name = sender, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = body, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = receiver, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = timer, fnum = 4, rnum = 5, type = sint64,
	      occurrence = optional, opts = []},
       #field{name = display, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []},
       #field{name = type, fnum = 6, rnum = 7,
	      type = {enum, pattern}, occurrence = optional,
	      opts = []},
       #field{name = unread, fnum = 7, rnum = 8, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, online},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, pattern}, occurrence = required,
	      opts = []},
       #field{name = body, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = online, fnum = 3, rnum = 4, type = string,
	      occurrence = repeated, opts = []},
       #field{name = offline, fnum = 4, rnum = 5,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, room},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, room_type}, occurrence = required,
	      opts = []},
       #field{name = rname, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = body, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = history, fnum = 4, rnum = 5,
	      type = {msg, chat}, occurrence = repeated, opts = []}]},
     {{msg, system},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, pattern}, occurrence = required,
	      opts = []},
       #field{name = receiver, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = body, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, history},
      [#field{name = sender, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = receiver, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = history, fnum = 3, rnum = 4,
	      type = {msg, chat}, occurrence = repeated, opts = []},
       #field{name = pageSize, fnum = 4, rnum = 5,
	      type = sint64, occurrence = optional, opts = []},
       #field{name = pageNum, fnum = 5, rnum = 6,
	      type = sint64, occurrence = optional, opts = []}]},
     {{msg, data},
      [#field{name = chat, fnum = 1, rnum = 2,
	      type = {msg, chat}, occurrence = optional, opts = []},
       #field{name = online, fnum = 2, rnum = 3,
	      type = {msg, online}, occurrence = optional, opts = []},
       #field{name = room, fnum = 3, rnum = 4,
	      type = {msg, room}, occurrence = optional, opts = []},
       #field{name = system, fnum = 4, rnum = 5,
	      type = {msg, system}, occurrence = optional, opts = []},
       #field{name = history, fnum = 5, rnum = 6,
	      type = {msg, history}, occurrence = optional,
	      opts = []}]},
     {{msg, msg},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, cmd}, occurrence = required, opts = []},
       #field{name = data, fnum = 2, rnum = 3,
	      type = {msg, data}, occurrence = required,
	      opts = []}]}].


get_msg_names() ->
    [chat, online, room, system, history, data, msg].


get_group_names() -> [].


get_msg_or_group_names() ->
    [chat, online, room, system, history, data, msg].


get_enum_names() -> [cmd, pattern, room_type].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(chat) ->
    [#field{name = sender, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = body, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = receiver, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = timer, fnum = 4, rnum = 5, type = sint64,
	    occurrence = optional, opts = []},
     #field{name = display, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []},
     #field{name = type, fnum = 6, rnum = 7,
	    type = {enum, pattern}, occurrence = optional,
	    opts = []},
     #field{name = unread, fnum = 7, rnum = 8, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(online) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, pattern}, occurrence = required,
	    opts = []},
     #field{name = body, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = online, fnum = 3, rnum = 4, type = string,
	    occurrence = repeated, opts = []},
     #field{name = offline, fnum = 4, rnum = 5,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def(room) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, room_type}, occurrence = required,
	    opts = []},
     #field{name = rname, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = body, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = history, fnum = 4, rnum = 5,
	    type = {msg, chat}, occurrence = repeated, opts = []}];
find_msg_def(system) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, pattern}, occurrence = required,
	    opts = []},
     #field{name = receiver, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = body, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def(history) ->
    [#field{name = sender, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = receiver, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = history, fnum = 3, rnum = 4,
	    type = {msg, chat}, occurrence = repeated, opts = []},
     #field{name = pageSize, fnum = 4, rnum = 5,
	    type = sint64, occurrence = optional, opts = []},
     #field{name = pageNum, fnum = 5, rnum = 6,
	    type = sint64, occurrence = optional, opts = []}];
find_msg_def(data) ->
    [#field{name = chat, fnum = 1, rnum = 2,
	    type = {msg, chat}, occurrence = optional, opts = []},
     #field{name = online, fnum = 2, rnum = 3,
	    type = {msg, online}, occurrence = optional, opts = []},
     #field{name = room, fnum = 3, rnum = 4,
	    type = {msg, room}, occurrence = optional, opts = []},
     #field{name = system, fnum = 4, rnum = 5,
	    type = {msg, system}, occurrence = optional, opts = []},
     #field{name = history, fnum = 5, rnum = 6,
	    type = {msg, history}, occurrence = optional,
	    opts = []}];
find_msg_def(msg) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, cmd}, occurrence = required, opts = []},
     #field{name = data, fnum = 2, rnum = 3,
	    type = {msg, data}, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(cmd) ->
    [{chat, 1}, {online, 2}, {room, 3}, {system, 4},
     {history, 5}];
find_enum_def(pattern) -> [{private, 1}, {public, 2}];
find_enum_def(room_type) ->
    [{create, 1}, {add, 2}, {remove, 3}, {drop, 4},
     {flush, 5}, {history, 6}];
find_enum_def(_) -> error.


enum_symbol_by_value(cmd, Value) ->
    enum_symbol_by_value_cmd(Value);
enum_symbol_by_value(pattern, Value) ->
    enum_symbol_by_value_pattern(Value);
enum_symbol_by_value(room_type, Value) ->
    enum_symbol_by_value_room_type(Value).


enum_value_by_symbol(cmd, Sym) ->
    enum_value_by_symbol_cmd(Sym);
enum_value_by_symbol(pattern, Sym) ->
    enum_value_by_symbol_pattern(Sym);
enum_value_by_symbol(room_type, Sym) ->
    enum_value_by_symbol_room_type(Sym).


enum_symbol_by_value_cmd(1) -> chat;
enum_symbol_by_value_cmd(2) -> online;
enum_symbol_by_value_cmd(3) -> room;
enum_symbol_by_value_cmd(4) -> system;
enum_symbol_by_value_cmd(5) -> history.


enum_value_by_symbol_cmd(chat) -> 1;
enum_value_by_symbol_cmd(online) -> 2;
enum_value_by_symbol_cmd(room) -> 3;
enum_value_by_symbol_cmd(system) -> 4;
enum_value_by_symbol_cmd(history) -> 5.

enum_symbol_by_value_pattern(1) -> private;
enum_symbol_by_value_pattern(2) -> public.


enum_value_by_symbol_pattern(private) -> 1;
enum_value_by_symbol_pattern(public) -> 2.

enum_symbol_by_value_room_type(1) -> create;
enum_symbol_by_value_room_type(2) -> add;
enum_symbol_by_value_room_type(3) -> remove;
enum_symbol_by_value_room_type(4) -> drop;
enum_symbol_by_value_room_type(5) -> flush;
enum_symbol_by_value_room_type(6) -> history.


enum_value_by_symbol_room_type(create) -> 1;
enum_value_by_symbol_room_type(add) -> 2;
enum_value_by_symbol_room_type(remove) -> 3;
enum_value_by_symbol_room_type(drop) -> 4;
enum_value_by_symbol_room_type(flush) -> 5;
enum_value_by_symbol_room_type(history) -> 6.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> wechat.



gpb_version_as_string() ->
    "4.2.1".

gpb_version_as_list() ->
    [4,2,1].
